document.addEventListener('DOMContentLoaded', () => {
  const grid = document.getElementById('mainCardsGrid');
  const modalOverlay = document.getElementById('modalOverlay');
  const modalContainer = document.getElementById('modalContainer');
  const nav = document.querySelector('nav');
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  let originalNavDisplay = '';
  let originalNavVisibility = '';
  let originalNavOpacity = '';
  
  if (nav) {
    const computedStyle = getComputedStyle(nav);
    originalNavDisplay = computedStyle.display;
    originalNavVisibility = computedStyle.visibility;
    originalNavOpacity = computedStyle.opacity;
  }

  function parseDate(str) {
  if (!str) return 0;

  // ISO-—Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD
  if (/^\d{4}-\d{2}-\d{2}/.test(str)) {
    return new Date(str).getTime();
  }

  // –§–æ—Ä–º–∞—Ç DD.MM.YYYY
  if (/^\d{2}\.\d{2}\.\d{4}$/.test(str)) {
    const [dd, mm, yyyy] = str.split('.');
    return new Date(`${yyyy}-${mm}-${dd}`).getTime();
  }

  // –§–æ—Ä–º–∞—Ç DD.MM.YY (–¥–≤–µ —Ü–∏—Ñ—Ä—ã –≥–æ–¥–∞ ‚Üí —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ 20YY)
  if (/^\d{2}\.\d{2}\.\d{2}$/.test(str)) {
    const [dd, mm, yy] = str.split('.');
    const yyyy = parseInt(yy, 10) < 50 ? `20${yy}` : `19${yy}`;
    return new Date(`${yyyy}-${mm}-${dd}`).getTime();
  }

  // fallback
  return new Date(str).getTime();
}

  // === –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–µ–π –∏–∑ –æ–±—â–µ–≥–æ JSON ===
  fetch('./data/articles.json')
    .then(r => r.json())
    .then(articles => {
      // —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ –≤—ã—à–µ)
      articles.sort((a, b) => parseDate(b.date) - parseDate(a.date));

      // –±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ 4 —Å—Ç–∞—Ç—å–∏
      const latest = articles.slice(0, 4);

      renderCards(latest);
    })
    .catch(err => {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–µ–π:', err);
      grid.innerHTML = '<p class="error-message">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏.</p>';
    });

  // === –†–µ–Ω–¥–µ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π ===
  function renderCards(cards) {
  grid.innerHTML = '';

  cards.forEach(article => {
    const el = document.createElement('div');
    el.className = 'promo-card';
    el.style.backgroundImage = article.backimage ? `url(${article.backimage})` : 'none';

    el.innerHTML = `
      <div class="promo-overlay"></div>
      <div class="promo-inner">
        <div class="promo-badges">
          <span class="promo-date">${article.date}</span>
        </div>
        <div class="promo-title">${article.title}</div>
        <button class="promo-btn" type="button">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</button>
      </div>
    `;

    // üîò –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ –≤—Å—é –∫–∞—Ä—Ç–æ—á–∫—É
    el.addEventListener('click', () => openModal(article));

    // üîò –∫–Ω–æ–ø–∫–∞ —Ç–æ–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (–∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–ø–ª—ã—Ç–∏–µ, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –¥–≤–æ–π–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞)
    el.querySelector('.promo-btn').addEventListener('click', (e) => {
      e.stopPropagation();
      openModal(article);
    });

    grid.appendChild(el);
  });
}

  // === –ú–æ–¥–∞–ª–∫–∞ ===
  function openModal(article) {
    // –°–∫—Ä—ã–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    
    modalContainer.innerHTML = `
      <div class="modal-image-container">
        <img src="${article.image}" alt="${article.title}" class="modal-image">
      </div>
      <div class="modal-date">${article.date}</div>
      <h2 class="modal-title">${article.title}</h2>
      <div class="modal-content">${article.fullContent || article.shortDescription || ''}</div>
    `;

    modalOverlay.classList.add('active');
    document.body.style.overflow = 'hidden';
    modalContainer.scrollTo(0, 0);

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≤–Ω—É—Ç—Ä–∏ –º–æ–¥–∞–ª–∫–∏ –¥–ª—è –∑—É–º–∞
    const images = [...modalContainer.querySelectorAll('img')].map(img => ({
      src: img.src,
      alt: img.alt || article.title
    }));
    modalContainer.querySelectorAll('img').forEach((img, idx) => {
      img.style.cursor = 'zoom-in';
      img.addEventListener('click', () => openImageZoom(images, idx));
    });
  }

  function closeModal() {
    modalOverlay.classList.remove('active');
    document.body.style.overflow = 'auto';
  }

  modalOverlay.addEventListener('click', (e) => {
    if (e.target === modalOverlay) closeModal();
  });

  document.addEventListener('keydown', (e) => {
    if (imageZoomOverlay.classList.contains('active')) {
      if (e.key === 'Escape') closeImageZoom();
      else if (e.key === 'ArrowLeft') showPrevImage();
      else if (e.key === 'ArrowRight') showNextImage();
      return;
    }
    if (e.key === 'Escape' && modalOverlay.classList.contains('active')) {
      closeModal();
    }
  });

  // === –õ–∞–π—Ç–±–æ–∫—Å (zoom) ===
  const imageZoomOverlay = document.createElement('div');
  imageZoomOverlay.id = 'imageZoomOverlay';
  imageZoomOverlay.innerHTML = `
    <div class="image-zoom-container">
      <button class="image-zoom-prev" aria-label="–ü—Ä–µ–¥—ã–¥—É—â–µ–µ">‚Äπ</button>
      <img class="image-zoom-img" alt="">
      <button class="image-zoom-next" aria-label="–°–ª–µ–¥—É—é—â–µ–µ">‚Ä∫</button>
    </div>
  `;
  document.body.appendChild(imageZoomOverlay);

  const zoomImg = imageZoomOverlay.querySelector('.image-zoom-img');
  const zoomPrev = imageZoomOverlay.querySelector('.image-zoom-prev');
  const zoomNext = imageZoomOverlay.querySelector('.image-zoom-next');

  let currentImages = [];
  let currentIndex = 0;

  function openImageZoom(images, startIndex = 0) {
    
    currentImages = images;
    currentIndex = startIndex;
    showZoomImage();
    imageZoomOverlay.classList.add('active');
  }
  
  function closeImageZoom() {
    imageZoomOverlay.classList.remove('active');
    currentImages = [];
    currentIndex = 0;
  }
  
  function showPrevImage() {
    if (!currentImages.length) return;
    currentIndex = (currentIndex - 1 + currentImages.length) % currentImages.length;
    showZoomImage();
  }
  
  function showNextImage() {
    if (!currentImages.length) return;
    currentIndex = (currentIndex + 1) % currentImages.length;
    showZoomImage();
  }
  
  function showZoomImage() {
    if (!currentImages.length) return;
    const { src, alt } = currentImages[currentIndex];
    zoomImg.classList.remove('fade-in');
    void zoomImg.offsetWidth;
    zoomImg.alt = alt || '';
    zoomImg.src = src;
    zoomPrev.style.display = currentImages.length > 1 ? 'block' : 'none';
    zoomNext.style.display = currentImages.length > 1 ? 'block' : 'none';
    zoomImg.onload = () => zoomImg.classList.add('fade-in');
  }

  zoomPrev.addEventListener('click', showPrevImage);
  zoomNext.addEventListener('click', showNextImage);
  imageZoomOverlay.addEventListener('click', (e) => {
    if (!e.target.closest('.image-zoom-container')) closeImageZoom();
  });

  // === –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∫–∞—Ä—Ç–∏–Ω–æ–∫ ===
  document.addEventListener('error', function(e) {
    if (e.target.tagName !== 'IMG') return;
    const img = e.target;
    const container = img.closest('.modal-image-container, .image-zoom-container');
    if (!container) return;
    if (!container.querySelector('.image-error')) {
      const errorDiv = document.createElement('div');
      errorDiv.className = 'image-error';
      errorDiv.textContent = '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ';
      container.appendChild(errorDiv);
    }
    img.style.display = 'none';
  }, true);

  document.addEventListener('load', function(e) {
    if (e.target.tagName !== 'IMG') return;
    const img = e.target;
    img.style.display = '';
    const container = img.closest('.modal-image-container, .image-zoom-container');
    if (container) {
      const err = container.querySelector('.image-error');
      if (err) err.remove();
    }
  }, true);
});